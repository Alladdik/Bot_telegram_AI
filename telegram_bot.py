import logging
import subprocess
import asyncio
import random
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from typing import Dict, List

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = 'your bot token'#bot farher

# Global state storage
user_states: Dict[int, dict] = {}
chat_histories: Dict[int, List[dict]] = {}
active_scenarios: Dict[int, dict] = {}

# Enhanced default user settings
DEFAULT_SETTINGS = {
    'response_length': 'medium',     # short, medium, long
    'story_length': 'medium',        # short, medium, long
    'detail_level': 'medium',        # basic, medium, detailed
    'math_precision': 2,             # decimal places for math calculations
    'language': 'uk',                # uk, ru, en
    'math_mode': 'calculator'        # calculator, problems
}

MAIN_MENU_KEYBOARD = [
    [KeyboardButton("üí≠ –ó–≤–∏—á–∞–π–Ω–∏–π —Ä–µ–∂–∏–º")],
    [KeyboardButton("‚ù§Ô∏è –†–æ–º–∞–Ω—Ç–∏—á–Ω—ñ –ø—Ä–∏–≥–æ–¥–∏"), KeyboardButton("üé≠ –†–æ–ª—å–æ–≤—ñ –ø—Ä–∏–≥–æ–¥–∏")],
    [KeyboardButton("üìñ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ–π"), KeyboardButton("üî¢ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞")],
    [KeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"), KeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é")]
]

class AIChat:
    @staticmethod
    async def get_ai_response(message: str, settings: dict, mode: str = 'chat') -> dict:
        """Gets optimized AI response based on settings and mode."""
        length_map = {
            'short': 50,
            'medium': 150,
            'long': 300
        }
        
        system_prompts = {
            'chat': """–¢–∏ - –¥—Ä—É–∂–Ω—ñ–π —Ç–∞ –∫–æ—Ä–∏—Å–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç. –°–ø—ñ–ª–∫—É–π—Å—è –ø—Ä–∏—Ä–æ–¥–Ω–æ, 
                      –ø—Ä–æ—è–≤–ª—è–π –µ–º–ø–∞—Ç—ñ—é —Ç–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è. –ù–∞–¥–∞–≤–∞–π –∫–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.""",
            'romance': """–¢–∏ - –∞–≤—Ç–æ—Ä —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–∏—Ö —ñ—Å—Ç–æ—Ä—ñ–π. –°—Ç–≤–æ—Ä—é–π –µ–º–æ—Ü—ñ–π–Ω—ñ, 
                         –∑–∞—Ö–æ–ø–ª—é—é—á—ñ —Å—é–∂–µ—Ç–∏ –ø—Ä–æ –∫–æ—Ö–∞–Ω–Ω—è —Ç–∞ —Å—Ç–æ—Å—É–Ω–∫–∏. –£–Ω–∏–∫–∞–π 
                         –Ω–µ–¥–æ—Ä–µ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É.""",
            'roleplay': """–¢–∏ - –≤–µ–¥—É—á–∏–π —Ä–æ–ª—å–æ–≤–æ—ó –≥—Ä–∏. –°—Ç–≤–æ—Ä—é–π –∑–∞—Ö–æ–ø–ª—é—é—á—ñ 
                          –ø—Ä–∏–≥–æ–¥–Ω–∏—Ü—å–∫—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó –∑ —á—ñ—Ç–∫–∏–º–∏ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ –≤–∏–±–æ—Ä—É. 
                          –†–µ–∞–≥—É–π –Ω–∞ –¥—ñ—ó –≥—Ä–∞–≤—Ü—è.""",
            'story': """–¢–∏ - –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏–π –∞–≤—Ç–æ—Ä. –°—Ç–≤–æ—Ä—é–π —Ü—ñ–∫–∞–≤—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –±–∞–∑—É—é—á–∏—Å—å 
                       –Ω–∞ –≤–∫–∞–∑—ñ–≤–∫–∞—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –î–æ–¥–∞–≤–∞–π –¥–µ—Ç–∞–ª—ñ —Ç–∞ —Ä–æ–∑–≤–∏–≤–∞–π —Å—é–∂–µ—Ç.""",
            'math_problems': """–¢–∏ - –≤–∏–∫–ª–∞–¥–∞—á –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏. –°—Ç–≤–æ—Ä—é–π –∑—Ä–æ–∑—É–º—ñ–ª—ñ 
                              –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ –∑–∞–¥–∞—á—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ."""
        }

        length_limit = length_map[settings['response_length']]
        system_prompt = system_prompts.get(mode, system_prompts['chat'])
        
        base_prompt = f"""System: {system_prompt}
–û–±–º–µ–∂–µ–Ω–Ω—è –¥–æ–≤–∂–∏–Ω–∏: {length_limit} —Å–ª—ñ–≤.
–†—ñ–≤–µ–Ω—å –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó: {settings['detail_level']}
–ú–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {settings['language']}

User: {message}"""

        try:
            process = subprocess.Popen(
                ['ollama', 'run', 'gemma2:9b'],
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            
            result, _ = process.communicate(input=base_prompt.encode(), timeout=300)
            response = result.decode().strip()
            
            choices = []
            if mode in ['romance', 'roleplay', 'story']:
                choices = await AIChat.generate_choices(response, settings)
                choices.append("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
            
            return {
                'text': response,
                'choices': choices
            }
        except Exception as e:
            logger.error(f"AI Response Error: {e}")
            return {
                'text': "–í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                'choices': ["üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"]
            }

    @staticmethod
    async def generate_choices(response: str, settings: dict) -> List[str]:
        """Generates 2-4 continuation choices for interactive modes."""
        choice_prompt = f"""–ù–∞ –æ—Å–Ω–æ–≤—ñ —Ü—ñ—î—ó —ñ—Å—Ç–æ—Ä—ñ—ó:
{response}
–°—Ç–≤–æ—Ä–∏ 3-4 —Ü—ñ–∫–∞–≤–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è. –ó—Ä–æ–±–∏ —ó—Ö —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–∏–º–∏ —Ç–∞ –∑–∞—Ö–æ–ø–ª—é—é—á–∏–º–∏."""
        
        try:
            process = subprocess.Popen(
                ['ollama', 'run', 'gemma2:9b'],
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            
            result, _ = process.communicate(input=choice_prompt.encode(), timeout=300)
            choices = result.decode().strip().split('\n')
            valid_choices = [c.strip() for c in choices if c.strip()][:3]  # Limit to 3 choices
            return valid_choices
        except Exception:
            return ["–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é", "–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ", "üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Initial menu."""
    user_id = update.effective_user.id
    if user_id not in user_states:
        user_states[user_id] = {'settings': DEFAULT_SETTINGS.copy()}
    
    reply_markup = ReplyKeyboardMarkup(MAIN_MENU_KEYBOARD, resize_keyboard=True)
    
    await update.message.reply_text(
        "üëã –í—ñ—Ç–∞—é! –í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º:\n\n"
        "üí≠ –ó–≤–∏—á–∞–π–Ω–∏–π —Ä–µ–∂–∏–º - —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ –®–Ü\n"
        "‚ù§Ô∏è –†–æ–º–∞–Ω—Ç–∏—á–Ω—ñ –ø—Ä–∏–≥–æ–¥–∏ - —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –ø—Ä–æ –∫–æ—Ö–∞–Ω–Ω—è\n"
        "üé≠ –†–æ–ª—å–æ–≤—ñ –ø—Ä–∏–≥–æ–¥–∏ - —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ –ø—Ä–∏–≥–æ–¥–Ω–∏—Ü—å–∫—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó\n"
        "üìñ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ–π - –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —ñ—Å—Ç–æ—Ä—ñ–π –∑–∞ –≤–∞—à–∏–º –æ–ø–∏—Å–æ–º\n"
        "üî¢ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è –∑–∞–¥–∞—á —Ç–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è\n"
        "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è - –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞",
        reply_markup=reply_markup
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handles text messages."""
    message_text = update.message.text
    user_id = update.effective_user.id
    
    if user_id not in user_states:
        user_states[user_id] = {'settings': DEFAULT_SETTINGS.copy()}
    
    settings = user_states[user_id].get('settings', DEFAULT_SETTINGS.copy())
    
    # Handle return to main menu
    if message_text == "üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é":
        reply_markup = ReplyKeyboardMarkup(MAIN_MENU_KEYBOARD, resize_keyboard=True)
        await update.message.reply_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=reply_markup)
        user_states[user_id]['mode'] = None
        return

    mode_map = {
        "üí≠ –ó–≤–∏—á–∞–π–Ω–∏–π —Ä–µ–∂–∏–º": ('chat', "–í–∏–±—Ä–∞–Ω–æ –∑–≤–∏—á–∞–π–Ω–∏–π —Ä–µ–∂–∏–º —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è. –ú–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥!"),
        "‚ù§Ô∏è –†–æ–º–∞–Ω—Ç–∏—á–Ω—ñ –ø—Ä–∏–≥–æ–¥–∏": ('romance', "–û–ø–∏—à—ñ—Ç—å –ø–æ—á–∞—Ç–∫–æ–≤—É —Å–∏—Ç—É–∞—Ü—ñ—é –¥–ª—è —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó:"),
        "üé≠ –†–æ–ª—å–æ–≤—ñ –ø—Ä–∏–≥–æ–¥–∏": ('roleplay', "–û–ø–∏—à—ñ—Ç—å —Å–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Ç–∞ –ø–æ—á–∞—Ç–∫–æ–≤—É —Å–∏—Ç—É–∞—Ü—ñ—é:"),
        "üìñ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ–π": ('story', "–û–ø–∏—à—ñ—Ç—å, —è–∫—É —ñ—Å—Ç–æ—Ä—ñ—é –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏:"),
        "üî¢ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": ('math', "–í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏:\n1. –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n2. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–¥–∞—á"),
        "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è": ('settings', None),
        "üóë –û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é": ('clear', None)
    }

    if message_text in mode_map:
        mode, response_text = mode_map[message_text]
        if mode == 'settings':
            await settings_menu(update, context)
            return
        elif mode == 'clear':
            chat_histories[user_id] = {}
            await update.message.reply_text("–Ü—Å—Ç–æ—Ä—ñ—é –æ—á–∏—â–µ–Ω–æ!")
            return
        
        user_states[user_id]['mode'] = mode
        if response_text:
            keyboard = [[KeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(response_text, reply_markup=reply_markup)
    else:
        mode = user_states[user_id].get('mode', 'chat')
        
        if mode == 'math':
            result = await MathProcessor.process_math(message_text, settings)
            keyboard = [[KeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(result['text'], reply_markup=reply_markup)
        else:
            response = await AIChat.get_ai_response(message_text, settings, mode)
            await update.message.reply_text(response['text'])
            
            if response['choices']:
                keyboard = [[KeyboardButton(choice)] for choice in response['choices']]
                keyboard.append([KeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")])
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è:", reply_markup=reply_markup)

async def settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Shows settings menu."""
    query = update.callback_query
    user_id = update.effective_user.id if update.effective_user else query.from_user.id
    
    if user_id not in user_states:
        user_states[user_id] = {'settings': DEFAULT_SETTINGS.copy()}
    
    settings = user_states[user_id].get('settings', DEFAULT_SETTINGS.copy())
    
    keyboard = [
        [InlineKeyboardButton("üìè –î–æ–≤–∂–∏–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ", callback_data="settings_length")],
        [InlineKeyboardButton("üìö –î–æ–≤–∂–∏–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ–π", callback_data="settings_story_length")],
        [InlineKeyboardButton("üîç –†—ñ–≤–µ–Ω—å –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó", callback_data="settings_detail")],
        [InlineKeyboardButton("üî¢ –¢–æ—á–Ω—ñ—Å—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏", callback_data="settings_math")],
        [InlineKeyboardButton("üßÆ –†–µ–∂–∏–º –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏", callback_data="settings_math_mode")],
        [InlineKeyboardButton("üåç –ú–æ–≤–∞", callback_data="settings_language")],
        [InlineKeyboardButton("‚Ü©Ô∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="settings_back")]
    ]
    
    language_display = {
        'uk': '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
        'ru': '–†–æ—Å—ñ–π—Å—å–∫–∞',
        'en': 'English'
    }
    
    current_settings = (
        f"–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:\n"
        f"üìè –î–æ–≤–∂–∏–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {settings['response_length']}\n"
        f"üìö –î–æ–≤–∂–∏–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ–π: {settings['story_length']}\n"
        f"üîç –î–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è: {settings['detail_level']}\n"
        f"üî¢ –¢–æ—á–Ω—ñ—Å—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏: {settings['math_precision']}\n"
        f"üßÆ –†–µ–∂–∏–º –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏: {settings['math_mode']}\n"
        f"üåç –ú–æ–≤–∞: {language_display[settings['language']]}"
    )
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if query:
        await query.message.edit_text(current_settings, reply_markup=reply_markup)
    else:
        await update.message.reply_text(current_settings, reply_markup=reply_markup)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handles callback queries from inline keyboards."""
    query = update.callback_query
    user_id = query.from_user.id
    
    if user_id not in user_states:
        user_states[user_id] = {'settings': DEFAULT_SETTINGS.copy()}
    
    settings = user_states[user_id].get('settings', DEFAULT_SETTINGS.copy())

    # Define settings options
    setting_options = {
        'settings_length': {
            'title': "–í–∏–±–µ—Ä—ñ—Ç—å –¥–æ–≤–∂–∏–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:",
            'options': [
                ('–ö–æ—Ä–æ—Ç–∫–∞', 'short'),
                ('–°–µ—Ä–µ–¥–Ω—è', 'medium'),
                ('–î–æ–≤–≥–∞', 'long')
            ],
            'setting_key': 'response_length'
        },
        'settings_story_length': {
            'title': "–í–∏–±–µ—Ä—ñ—Ç—å –¥–æ–≤–∂–∏–Ω—É —ñ—Å—Ç–æ—Ä—ñ–π:",
            'options': [
                ('–ö–æ—Ä–æ—Ç–∫–∞', 'short'),
                ('–°–µ—Ä–µ–¥–Ω—è', 'medium'),
                ('–î–æ–≤–≥–∞', 'long')
            ],
            'setting_key': 'story_length'
        },
        'settings_detail': {
            'title': "–í–∏–±–µ—Ä—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó:",
            'options': [
                ('–ë–∞–∑–æ–≤–∏–π', 'basic'),
                ('–°–µ—Ä–µ–¥–Ω—ñ–π', 'medium'),
                ('–î–µ—Ç–∞–ª—å–Ω–∏–π', 'detailed')
            ],
            'setting_key': 'detail_level'
        },
        'settings_math': {
            'title': "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–æ—á–Ω—ñ—Å—Ç—å –æ–±—á–∏—Å–ª–µ–Ω—å:",
            'options': [
                ('0 –∑–Ω–∞–∫—ñ–≤', 0),
                ('2 –∑–Ω–∞–∫–∏', 2),
                ('4 –∑–Ω–∞–∫–∏', 4)
            ],
            'setting_key': 'math_precision'
        },
        'settings_math_mode': {
            'title': "–í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏:",
            'options': [
                ('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', 'calculator'),
                ('–ó–∞–¥–∞—á—ñ', 'problems')
            ],
            'setting_key': 'math_mode'
        },
        'settings_language': {
            'title': "–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
            'options': [
                ('–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', 'uk'),
                ('–†—É—Å—Å–∫–∏–π', 'ru'),
                ('English', 'en')
            ],
            'setting_key': 'language'
        }
    }

    # Handle setting value selection
    if query.data.startswith('set_'):
        _, setting_type, value = query.data.split('_')
        setting_key = None
        
        # Find the corresponding setting key
        for opt_key, opt_data in setting_options.items():
            if opt_key.endswith(setting_type):
                setting_key = opt_data['setting_key']
                break
        
        if setting_key:
            # Convert to proper type for numeric values
            if setting_key == 'math_precision':
                value = int(value)
            
            settings[setting_key] = value
            user_states[user_id]['settings'] = settings
            
            # Show confirmation
            await query.answer(f"–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ!")
            
            # Return to settings menu
            await show_settings_menu(query.message, user_id)
        return

    # Handle back button
    if query.data == 'settings_back':
        keyboard = [
            [KeyboardButton("üí≠ –ó–≤–∏—á–∞–π–Ω–∏–π —Ä–µ–∂–∏–º")],
            [KeyboardButton("‚ù§Ô∏è –†–æ–º–∞–Ω—Ç–∏—á–Ω—ñ –ø—Ä–∏–≥–æ–¥–∏"), KeyboardButton("üé≠ –†–æ–ª—å–æ–≤—ñ –ø—Ä–∏–≥–æ–¥–∏")],
            [KeyboardButton("üìñ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ–π"), KeyboardButton("üî¢ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞")],
            [KeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"), KeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await query.message.edit_text("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)
        return

    # Handle return to main menu
    if query.data == 'return_main_menu':
        keyboard = [
            [KeyboardButton("üí≠ –ó–≤–∏—á–∞–π–Ω–∏–π —Ä–µ–∂–∏–º")],
            [KeyboardButton("‚ù§Ô∏è –†–æ–º–∞–Ω—Ç–∏—á–Ω—ñ –ø—Ä–∏–≥–æ–¥–∏"), KeyboardButton("üé≠ –†–æ–ª—å–æ–≤—ñ –ø—Ä–∏–≥–æ–¥–∏")],
            [KeyboardButton("üìñ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ–π"), KeyboardButton("üî¢ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞")],
            [KeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"), KeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        if query.message:
            await query.message.edit_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=reply_markup)
        return

    # Show options for selected setting
    if query.data in setting_options:
        option_data = setting_options[query.data]
        keyboard = [
            [InlineKeyboardButton(text, callback_data=f"set_{query.data.split('_')[1]}_{value}")]
            for text, value in option_data['options']
        ]
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="settings_back")])
        keyboard.append([InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="return_main_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        current_value = settings[option_data['setting_key']]
        
        await query.message.edit_text(
            f"{option_data['title']}\n"
            f"–ü–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è: {current_value}",
            reply_markup=reply_markup
        )

async def show_settings_menu(message, user_id: int) -> None:
    """Helper function to show settings menu."""
    settings = user_states[user_id].get('settings', DEFAULT_SETTINGS.copy())
    
    keyboard = [
        [InlineKeyboardButton("üìè –î–æ–≤–∂–∏–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ", callback_data="settings_length")],
        [InlineKeyboardButton("üìö –î–æ–≤–∂–∏–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ–π", callback_data="settings_story_length")],
        [InlineKeyboardButton("üîç –†—ñ–≤–µ–Ω—å –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó", callback_data="settings_detail")],
        [InlineKeyboardButton("üî¢ –¢–æ—á–Ω—ñ—Å—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏", callback_data="settings_math")],
        [InlineKeyboardButton("üßÆ –†–µ–∂–∏–º –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏", callback_data="settings_math_mode")],
        [InlineKeyboardButton("üåç –ú–æ–≤–∞", callback_data="settings_language")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="return_main_menu")]
    ]
    
    language_display = {
        'uk': '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
        'ru': '–†–æ—Å—ñ–π—Å—å–∫–∞',
        'en': 'English'
    }
    
    current_settings = (
        f"–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:\n"
        f"üìè –î–æ–≤–∂–∏–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {settings['response_length']}\n"
        f"üìö –î–æ–≤–∂–∏–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ–π: {settings['story_length']}\n"
        f"üîç –î–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è: {settings['detail_level']}\n"
        f"üî¢ –¢–æ—á–Ω—ñ—Å—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏: {settings['math_precision']}\n"
        f"üßÆ –†–µ–∂–∏–º –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏: {settings['math_mode']}\n"
        f"üåç –ú–æ–≤–∞: {language_display[settings['language']]}"
    )
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await message.edit_text(current_settings, reply_markup=reply_markup)
    class MathProcessor:
        @staticmethod
        async def process_math(message: str, settings: dict) -> dict:
            """Process math input based on mode."""
            mode = settings['math_mode']
            precision = settings['math_precision']
            
            if mode == 'calculator':
                try:
                    # Basic sanitization and evaluation
                    expression = re.sub(r'[^0-9+\-*/().\s]', '', message)
                    result = eval(expression)
                    return {
                        'text': f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {round(result, precision)}"
                    }
                except:
                    return {
                        'text': "–ü–æ–º–∏–ª–∫–∞ —É –≤–∏—Ä–∞–∑—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
                    }
            else:  # problems mode
                return await AIChat.get_ai_response(message, settings, 'math_problems')

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Log errors caused by Updates."""
    logger.warning('Update "%s" caused error "%s"', update, context.error)
    
    try:
        if update.callback_query:
            await update.callback_query.message.reply_text(
                "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ü–æ–≤–µ—Ä—Ç–∞—é—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é...",
                reply_markup=ReplyKeyboardMarkup(MAIN_MENU_KEYBOARD, resize_keyboard=True)
            )
        elif update.message:
            await update.message.reply_text(
                "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ü–æ–≤–µ—Ä—Ç–∞—é—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é...",
                reply_markup=ReplyKeyboardMarkup(MAIN_MENU_KEYBOARD, resize_keyboard=True)
            )
    except:
        pass

async def exit_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle exit from any conversation mode."""
    user_id = update.effective_user.id
    
    # Clear user state
    if user_id in user_states:
        user_states[user_id]['mode'] = None
    
    # Return to main menu
    reply_markup = ReplyKeyboardMarkup(MAIN_MENU_KEYBOARD, resize_keyboard=True)
    await update.message.reply_text("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:", reply_markup=reply_markup)

def main() -> None:
    """Start the bot."""
    # Create the Application
    application = Application.builder().token(TOKEN).build()

    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_callback))
    
    # Add error handler
    application.add_error_handler(error_handler)
    
    # Start the Bot
    application.run_polling()

if __name__ == '__main__':
    main()
